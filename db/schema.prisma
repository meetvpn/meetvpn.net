// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id          Int    @id @default(autoincrement())
  referenceId String @unique

  email          String? @unique
  hashedPassword String?
  role           String  @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens   Token[]
  sessions Session[]
  account  Account?
}

model Session {
  id                 Int     @id @default(autoincrement())
  handle             String  @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hashedToken, type])
}

model Account {
  id     Int         @id @default(autoincrement())
  key    String      @unique
  status AccountType @default(INACTIVE)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccountType {
  INACTIVE
  ACTIVE
  CLOSED
}

enum TokenType {
  RESET_PASSWORD
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Server {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostname String @unique
  quality  Int

  accessKey AccessKey[]

  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  hosting   Hosting? @relation(fields: [hostingId], references: [id])
  hostingId Int?
}

model AccessKey {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  keyId Int? @unique

  method     String
  password   String
  host       String
  port       Int
  access_url String

  server   Server @relation(fields: [serverId], references: [id])
  serverId Int
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city        String?
  country     String
  countryCode String?

  servers Server[]
}

model Hosting {
  id       Int    @id @default(autoincrement())
  provider String

  servers Server[]
}
